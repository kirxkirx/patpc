#!/usr/bin/env bash

# Set the default result
OPENMP_OK=1

# Write a simple test program using GSL
echo "
/*
  OpenMP example program Hello World.
  The master thread forks a parallel region.
  All threads in the team obtain their thread number and print it.
  Only the master thread prints the total number of threads.
  Compile with: gcc -O3 -fopenmp omp_hello.c -o omp_hello
*/

#include <omp.h>
#include <stdio.h>
#include <stdlib.h>

int main (int argc, char *argv[]) {
  
  int nthreads, tid;

  /* Fork a team of threads giving them their own copies of variables */
#pragma omp parallel private(nthreads, tid)
  {
    /* Get thread number */
    tid = omp_get_thread_num();
    fprintf(stderr,\"Hello World from thread = %d\n\", tid);
    
    /* Only master thread does this */
    if (tid == 0) {
      nthreads = omp_get_num_threads();
      fprintf(stderr,\"Number of threads = %d\n\", nthreads);
    }
  }  /* All threads join master thread and disband */
  exit(0);
}
" > testprog.c

# check if it compiles
cc -o testprog testprog.c -lm -fopenmp &> /dev/null
if [ $? -ne 0 ];then
 OPENMP_OK=0
else
 # check if the executable file is produced
 if [ ! -x testprog ];then
  OPENMP_OK=0
 else
  # checks if the program can be started and returns 0 exit code
  ./testprog &> /dev/null
  if [ $? -ne 0 ];then
   OPENMP_OK=0
  fi
 fi
fi

# remove temporary files generated by the test
for TEST_FILE_TO_REMOVE in testprog testprog.c ;do
 if [ -f "$TEST_FILE_TO_REMOVE" ];then
  rm -f "$TEST_FILE_TO_REMOVE"
 fi
done

# echo report results
if [ $OPENMP_OK -eq 1 ];then
 echo "-fopenmp -DPATPC_ENABLE_OPENMP"
else
 echo ""
fi
